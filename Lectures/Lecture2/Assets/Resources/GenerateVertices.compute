// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel generateTexture TEXTURE_GENERATION
#pragma kernel marchCubes

const static uint3 LAYER_GROUP_SIZE = uint3(8, 8, 8);

const uniform float TIME;
const uniform int LAYER_OFFSET;
const uniform uint3 SPLIT_FACTOR;
const static float3 INV_SPLIT_FACTOR = 1.0 / SPLIT_FACTOR;

const uniform uint OCTAVE_COUNT;


#ifdef TEXTURE_GENERATION


#define SIMPLEX_4D
#include "Noise.cginc"                 // All noise belongs here
#undef SIMPLEX_4D

RWTexture3D<half4> outSurfaceTexture;

const static float PI = 3.14159265359;
    
float fWithOctaves(float3 p) {
    p *= INV_SPLIT_FACTOR;
    const float pz = p.z;
    p *= 2 * PI;

    float result = 0.0;
    float q = 0.25;
    for (uint o = 0; o < OCTAVE_COUNT; ++o) {
        float4 pnt = float4(cos(p.x), cos(p.y), sin(p.x), sin(p.y));

        result += snoise(
            float4(snoise(pnt), cos(p.z) / 5.0, sin(p.z) / 5.0, 0.0)
        ) / q;
        p *= 2.0;
        q *= 2.0;
    }
    return result - sin(pz * 2);
}

float3 getNormal(float3 a) {
    return normalize(float3(
        fWithOctaves(a + int3(1, 0, 0)) - fWithOctaves(a - int3(1, 0, 0)),
        fWithOctaves(a + int3(0, 1, 0)) - fWithOctaves(a - int3(0, 1, 0)),
        fWithOctaves(a + int3(0, 0, 1)) - fWithOctaves(a - int3(0, 0, 1))
    ));
}

[numthreads(LAYER_GROUP_SIZE.x, LAYER_GROUP_SIZE.y, LAYER_GROUP_SIZE.z)]
void generateTexture (
    uint3 threadID : SV_DispatchThreadID
) {
    if (!all(threadID < SPLIT_FACTOR)) {
        return;
    }
    
    outSurfaceTexture[threadID] = half4(
        getNormal(threadID),
        fWithOctaves(threadID)
    );
}

#else

// Cube
StructuredBuffer<int3> cubeVertices;

// Surface
Texture3D<half4> surfaceTexture;
SamplerState samplerLinearRepeat;

half4 fNormal(int3 p) {   // implicit surface definition
    
    if (all(0 < p && p < (int3) SPLIT_FACTOR - 1)) {
        return surfaceTexture.SampleLevel(
             samplerLinearRepeat, 
             (p + 0.5) * INV_SPLIT_FACTOR + float3(sin(TIME), cos(TIME), 0.0), 0
        );
    } else {
        return float4(normalize(
            int3(p == 0) - int3(p == (int3) SPLIT_FACTOR - 1) // correct normals at box ends
        ), 0.0);
    }
}

// Marching
StructuredBuffer<uint> caseToTrianglesCount;
StructuredBuffer<int3> caseToEdges;

struct VertexData {
    float3 pos, normal;
};

// Output points
RWStructuredBuffer<int> outPointsCount;
RWStructuredBuffer<VertexData> outPoints;

const static uint2 vertexFromEdge[12] = {
    int2(0, 1), int2(1, 2), int2(2, 3), int2(3, 0), 
    int2(4, 5), int2(5, 6), int2(6, 7), int2(7, 4), 
    int2(0, 4), int2(1, 5), int2(2, 6), int2(3, 7), 
};

[numthreads(LAYER_GROUP_SIZE.x, LAYER_GROUP_SIZE.y, LAYER_GROUP_SIZE.z)]
void marchCubes (uint3 threadID : SV_DispatchThreadID) {
    if (!all(threadID < SPLIT_FACTOR)) {
        return;
    }

    int3 id = threadID + int3(0, 0, LAYER_OFFSET);

    uint cubeCase = 0;
    for (uint v = 0; v < 8; v++) {
        if (fNormal(id + cubeVertices[v]).w > 0) {
            cubeCase |= 1 << v;
        }
    }

    uint caseTriangles = caseToTrianglesCount[cubeCase];
    int index;
    InterlockedAdd(outPointsCount[0], 3 * caseTriangles, index);
    for (uint t = 0; t < caseTriangles; t++) {
        int3 triangleEdges = caseToEdges[cubeCase * 5 + t];

        for (uint e = 0; e < 3; e++) {
            uint2 ij = vertexFromEdge[triangleEdges[e]];

            int3 a = id + cubeVertices[ij.x];
            int3 b = id + cubeVertices[ij.y];

            half4 fNormalA = fNormal(a);
            half4 fNormalB = fNormal(b);
            
            float alpha = abs(fNormalA.w) / (abs(fNormalA.w) + abs(fNormalB.w));
            
            VertexData res;

            res.pos = (id + lerp(cubeVertices[ij.x], cubeVertices[ij.y], alpha)) 
                    * INV_SPLIT_FACTOR;
            res.normal = lerp(fNormalA, fNormalB, alpha).xyz;
            
            outPoints[index + 3 * t + e] = res;
        }
    }
}


#endif